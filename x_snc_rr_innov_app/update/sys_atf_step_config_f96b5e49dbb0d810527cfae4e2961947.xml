<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step_config">
    <sys_atf_step_config action="INSERT_OR_UPDATE">
        <active>true</active>
        <batch_order_constraint/>
        <can_mutate_page>false</can_mutate_page>
        <category display_value="Server">317c4dc20b202200a8d7a12cf6673aa8</category>
        <class_name/>
        <class_type>script</class_type>
        <deprecated>false</deprecated>
        <description_generator><![CDATA[function generateDescription() {
    // the global variable 'step' represents the current glide record
    var description = "";
	// your code here
	return description;
}
 generateDescription();
]]></description_generator>
        <html_description><![CDATA[<p>Create email.read event</p>
<p>Use it after generate inbound email</p>]]></html_description>
        <icon>icon-article-document</icon>
        <inputs/>
        <name>Create email.read event</name>
        <order>1</order>
        <outputs/>
        <step_env display_value="Server - Independent">6c2bcea1870312009dccc9ded0e3ecca</step_env>
        <step_execution_generator><![CDATA[// The inputs are a map of the variables defined in the inputs related list below.
// Inputs are consumed in the step configuration. Input
// values may be hardcoded or mapped from the outputs of a previous step.
// If a test author using your step uses mapping to pass in an output from a previous 
// test step then when referencing the input variable the mapping will be resolved 
// automatically
//  Example:
//      var myRecords = new GlideRecord(inputs.table);
//
// The outputs are a map of the variables defined in the outputs related list.
// Outputs should be set (assigned) in order to pass data out of a test step that
// can be consumed my mapping as an input to subsequent steps. 
//  Example:
//      outputs.table = gr.getRecordClassName()
//
//
// Note that inputs and outputs are strongly typed as defined in their variable definition.
// Their behavior is the same as a dictionary defined field of the same type in a table.
//
// The stepResult is a simple API for controlling the step pass/fail and logging with three
// methods:
//      stepResult.setFailed: Causes step to fail
//
//      stepResult.setSuccess: Causes step to succeed
//
//      stepResult.setOutputMessage: Log a message to step results after step executes.
//            Can only be called once or will overwrite previous 
//            message
//
// If neither setFailed or setSuccess is called the default is to succeed.
//
// See 'Record Query' for an example of a scripted step config 
// or see test 'Check change approvals get generated'
//
// Example usage of step timeout in script
//      var counter = 0;
//      // 'timeout' is a field on the step form
//      while (counter <= timeout) {
//            if (desiredOutcome) {
//                stepResult.setOutputMessage('Success!');
//                stepResult.setSuccess();
//                return;
//            }
//            counter++;
//            gs.sleep(1000);
//      }
//
//      // desired outcome did not occur within the timeout
//      stepResult.setOutputMessage('Failure!');
//      stepResult.setFailed();
//
(function executeStep(inputs, outputs, stepResult, timeout) {

    var evt = new GlideRecord('sysevent');
    evt.initialize();
    var guest = new GlideRecord('sys_user');
    guest.addActiveQuery();
    guest.addQuery('user_name', 'guest');
    guest.query();

    if (guest.next()) {
        evt.user_id = guest.sys_id;
        evt.user_name = guest.user_name;
    }
    evt.process_on = new GlideDateTime();
    evt.name = "email.read";
    evt.parm1 = inputs.u_email;
    var resultado = evt.insert();
  // 	gs.eventQueue('email.read',null, inputs.u_email);
    stepResult.setOutputMessage('Success! ' + inputs.u_email+' - Event: '+resultado);
    stepResult.setSuccess();

}(inputs, outputs, stepResult, timeout));]]></step_execution_generator>
        <sys_class_name>sys_atf_step_config</sys_class_name>
        <sys_created_by>servicenow.rafael</sys_created_by>
        <sys_created_on>2020-05-14 03:52:46</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f96b5e49dbb0d810527cfae4e2961947</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>Create email.read event</sys_name>
        <sys_package display_value="Innovate App" source="x_snc_rr_innov_app">7d44728ddb445c5036036a3b1396197e</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Innovate App">7d44728ddb445c5036036a3b1396197e</sys_scope>
        <sys_update_name>sys_atf_step_config_f96b5e49dbb0d810527cfae4e2961947</sys_update_name>
        <sys_updated_by>servicenow.rafael</sys_updated_by>
        <sys_updated_on>2020-05-14 22:12:17</sys_updated_on>
        <template_reminder>Create email.read event</template_reminder>
        <type display_value="Test Step" name="sys_atf_step">fdc1514413b03200b10d3d7ed144b0de</type>
        <wizard_redirect/>
    </sys_atf_step_config>
    <sys_translated_text action="delete_multiple" query="documentkey=f96b5e49dbb0d810527cfae4e2961947"/>
    <sys_variable_value action="delete_multiple" query="document_key=f96b5e49dbb0d810527cfae4e2961947"/>
</record_update>
